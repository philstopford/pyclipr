name: Build Wheels

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libeigen3-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install eigen

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --confirm

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          # Build for Python 3.7 and later
          CIBW_BUILD: "cp37-* cp38-* cp39-* cp310-* cp311-* cp312-*"
          
          # Skip 32-bit builds and PyPy
          CIBW_SKIP: "*-win32 *i686 pp*"
          
          # Install system dependencies before building
          CIBW_BEFORE_BUILD_LINUX: |
            if command -v yum &> /dev/null; then
              yum install -y eigen3-devel cmake3 gcc-c++ make
              ln -sf /usr/bin/cmake3 /usr/bin/cmake || true
            elif command -v apt-get &> /dev/null; then
              apt-get update && apt-get install -y libeigen3-dev cmake build-essential
            fi
          CIBW_BEFORE_BUILD_MACOS: "brew install eigen cmake"
          CIBW_BEFORE_BUILD_WINDOWS: "choco install eigen3 cmake --confirm"
          
          # Set environment variables for CMake
          CIBW_ENVIRONMENT_LINUX: >
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17"
          CIBW_ENVIRONMENT_MACOS: >
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17"
          CIBW_ENVIRONMENT_WINDOWS: >
            CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=17"
          
          # Test the built wheels
          CIBW_TEST_REQUIRES: "numpy"
          CIBW_TEST_COMMAND: "python -c \"import pyclipr; print('pyclipr imported successfully')\""

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libeigen3-dev cmake

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build source distribution
        run: python -m build --sdist

      - name: Upload sdist as artifact
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI (on release)
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.11
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: */